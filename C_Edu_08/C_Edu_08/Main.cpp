/*
* chapter 08
*/
#include <stdio.h>

// string.h == string
#include <string.h>

#define _CRT_SECURE_NO_WARNINGS

void line()
{
	printf("\n======================================================================================\n\n");
}

int main()
{


	/*
	// ** 변수를 각각 선언하여 출력.
	int Number1 = 1;
	int Number2 = 2;
	int Number3 = 3;
	int Number4 = 4;
	int Number5 = 5;

	printf("%d\n", Number1);
	printf("%d\n", Number2);
	printf("%d\n", Number3);
	printf("%d\n", Number4);
	printf("%d\n", Number5);
	line();
	// 단점 : 각각의 변수명을 직접 작성하여야 한다. 번거롭다,
	// ================================================================================================

	// ** 하나의 배열을 선언하여 출력

	// ** 장점1 : 배열로 선언함으로써, 초기화 구문이 현저히 줄었다.
	int number[5] = { 1, 2, 3, 4, 5 };

	printf("%d\n", number[0]);
	printf("%d\n", number[1]);
	printf("%d\n", number[2]);
	printf("%d\n", number[3]);
	printf("%d\n", number[4]);
	line();
	// ================================================================================================
	
	// ==▼==▼==▼==▼==▼==▼==▼==▼==▼==▼==▼
	//					응	용
	// ==▼==▼==▼==▼==▼==▼==▼==▼==▼==▼==▼
	for (int i = 0; i < 3; ++i)
	{
		for (int j = 0; j < 10; ++j)
		{
			if (i == 0 || i == 2)
			{
				printf("==▼");
			}
		}
		if (i == 1)
		{
			printf("\t\t응\t용");
		}
		printf("\n");
	}
	printf("\n\n");
	// **장점2 : 위와 같이 출력함으로써, 출력의 구문도 현저히 줄었다.
	for (int i = 0; i < 5; ++i)
	{
		printf("number[%d] : %d\n", i, number[i]);
	}
	line();
	// 배열의 길이. 배열의 길이가 5 => 인덱스는 4까지.
	// 배열의 인덱스 => 배열 요소의 시작점을 가르침.
	// ================================================================================
	// const : 상수. = 변하지않는 값.
	// 배열을 선언할때 요소의 갯수를 적는것은 정수형 상수만 가능
	
	{
		// ** 사용이 불가능한 예
		int number[5] = 10; => 인덱스번호가 4번까지 존재. 0, 1, 2, 3, 4
	}


	{
		// **정상적인 사용의 예
		int Array[5];

		Array[0];
		Array[1];
		Array[2];
		Array[3];
		Array[4];

		printf("1. 입력 : ");
		scanf_s("%d", &Array[0]);
		printf("2. 입력 : ");
		scanf_s("%d", &Array[1]);
		printf("3. 입력 : ");
		scanf_s("%d", &Array[2]);
		printf("4. 입력 : ");
		scanf_s("%d", &Array[3]);
		printf("5. 입력 : ");
		scanf_s("%d", &Array[4]);
		line();

	}

	{
		// ** 배열의 초기화

		{
			// ** 전체 초기화
			int Ary[5] = { 1, 2, 3, 4, 5 };
			// ** 5개의 원소에 각각 1, 2, 3, 4, 5의 값이 초기화 됨.
			// 보통 for문으로 초기화.
		}

		{
			// ** 부분 초기화
			int Ary[5] = { 1, 2 };

			// ** 첫번째와 두번째 원소만 각각 1과 2로 초기화 되고,
			// ** 나머지 원소들은 0으로 초기화 된다.

			// ** 0 초기화
			int Array[5] = { 0 };

			//** 전체 원소가 0으로 초기화 된다.
			{
				// ** 배열의 길이를 정하지 않고 초기화.
				int Ary[] = { 1,2,3,4,5 };

				// ** 배열의 총 길이를 원소 1개의 데이터 크기로 나누면 원소의 개수를 확인할 수 있다.
				int count = sizeof(Array) / sizeof(int);

				printf("count = %d\n", count);
				line();
				// ** 전체 원소개수만큼 길이를 초기화 한다.

			}
		}
	}


	{
		// ** 2의 n 승에 해당하는 값으로 배열의 길이를 초기화 해준다.
		// 2의 n 승으로 만들어라
		// 효율적으로 만들기 위해서 10을 넣을거면 16으로 이런식으로 만듦(초기화)
		//
		int Array[16] = { 0 };

		// ** 10개만 사용하고 싶다면 16만큼의 길이로 초기화를 진행한 후
		// 아래와 같이 10만큼만 사용하면 된다.
		for (int i = 0; i < 10; ++i)
		{
			Array[i];
		}

	}
	*/

	// ====================================================================================
	// ** 문 자 열  배 열


	// ** '\0' Null문자
	{
		// **널문자가 없는 경우
		// char ary[5] = { 'A', 'P', 'P', 'L', 'E'};
		// 뒤에 쓰레기값들이 존재하여 APPLE이후 다른것들이 조금 더 출력이 된다.

		// **널 문자가 있는 경우
		char ary[8] = { 'A', 'P', 'P', 'L', 'E', '\0'};

		printf("%s\n", ary);
	}
	// 문자열의 배열의 크기는 넉넉하게 선언해야 함.


	
	{
		// ** 문자열 초기화
		// ** 아래와 같이 문자열을 초기화 할 경우 자동으로 널 문자가 포함됨.
		char str1[128] = "cat";
		char str2[128];
		
		
		// ** 문자열 복사
		strcpy(str1, "tiger");
		strcpy(str2, str1);

		printf("str2 : %s\n", str2);
		line();
	}







	return 0;
}